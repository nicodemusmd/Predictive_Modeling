center.scale = (x - x.bar)/x.std
hist(center.scale)
hist(x)
hist(center.scale)
YY = scale(x, center = TRUE, scale = TRUE)
hist(YY)
hist(center.scale)
hist(YY)
Y = scale(x)
hist(Y)
YY = scale(x, center = TRUE, scale = TRUE)
hist(YY)
hist(center.scale)
cov(YY)
YY
z = rchisq(1000, 5)
hist(z)
ZZ = scale(z)
cov(YY, Z)
cov(rbind(YY, Z))
cov(rbind(YY, ZZ))
cov((YY, ZZ))
var((YY, ZZ))
var(rbind(YY, ZZ))
?apply()
BoxCoxTrans(YY)
skewness(YY)
library(AppliedPredictiveModeling)
library(dplyr)
library(e1071)
library(statmod)
library(caret)
data(segmentationOriginal)
x = segmentationOriginal
str(x)
AvgIntenCh3
segmentationOriginal$AvgIntenCh3
dim(segmentationOriginal)
segmentationOriginal
segmentationOriginal[1:5,1:20]
names(segmentationOriginal)
## The analysis in this chapter focused on the training set samples, so the data are
## filtered for these cells:
segData <- subset(segmentationOriginal, Case == "Train")
dim(segData)
dim(x)
segData$Case
segData[1:5, 1:20]
## The Class and Cell fields will be saved into separate vectors, then removed
## from the main object:
cellID <- segData$Cell
class <- segData$Class
case <- segData$Case
# Now remove the columns
segData <- segData[, -(1:3)]
segData[1:5, 1:20]
dim(segData)
names(segData)
statusColNum <- grep("Status", names(segData))   ## Pattern Matching and Replacement
statusColNum
length(statusColNum)
segDataCont <- segData[, -statusColNum]  ## only continous predictors
dim(segDataCont)
names(segDataCont)
## To center and scale predictors, scale(x, center = TRUE, scale = TRUE)can be used.
YY = scale(segDataCont)
head(colMeans(YY))
var(YY[,1:5])    ## same as cov
head(cov(YY))
var(YY[,1:5])    ## same as cov
# For one predictor:
skewness(segDataCont$AvgIntenCh3)  ## or to use
skewness(segDataCont[,5])
# Since all the predictors are numeric columns, the apply function can
# be used to compute the skewness across columns.
skewValues <- apply(segDataCont, 2, skewness)
head(skewValues)  ##skewValues
library(caret)
AvgIntenCh3Trans <- BoxCoxTrans(segDataCont$AvgIntenCh3)
AvgIntenCh3Trans
# The original data
head(segDataCont$AvgIntenCh3)
skewness(segDataCont$AvgIntenCh3)
# After transformation
predict(AvgIntenCh3Trans, head(segDataCont$AvgIntenCh3)) ## The first 6 values after tranformation
# After transformation
predict(AvgIntenCh3Trans) ## The first 6 values after tranformation
# After transformation
predict(AvgIntenCh3Trans) ## The first 6 values after tranformation
# After transformation
predict(AvgIntenCh3Trans, segDataCont$AvgIntenCh3) ## The first 6 values after tranformation
?predict()
## manually checking
(69.91688^(.3) - 1)/(.3)
BoxCoxTrans(x)
x
x = rgamma(1000, 1, 1)
BoxCoxTrans(x)
x.bar = mean(x);x.bar
x.std = sqrt(var(x)); x.std
center.scale = (x - x.bar)/x.std
BoxCoxTrans(center.scale)
BoxCoxTrans(x)
######## chapter 3 ###########
set.seed(1)
x = rgamma(1000, 1, 1)
z = rchisq(1000, 5)
hist(z)
hist(x)
x
BoxCoxTrans(x)
x.bar = mean(x);x.bar
x.std = sqrt(var(x)); x.std
center.scale = (x - x.bar)/x.std
BoxCoxTrans(center.scale)
hist(center.scale)
xxx = preProcess(x, method = c("BoxCox"))
xxx = preProcess(as.matrix(x), method = c("BoxCox"))
x = c(25,24.9,25.4,24.4,22.9,7.7,25.1,24.9,24.9,24.9,24.3,24.6,24.3,24.6,24.1,24.5,24)
var(x)
M = as.matrix(cbind(x1, x2))
x1 = c(25, 24.9, 25.4, 24.4, 22.9, 7.7, 25.1, 24.9, 24.9, 24.9, 24.3, 24.6, 24.3, 24.6, 24.1, 24.5, 24)
x2 = c(86, 84, 77, 82, 79, 86, 82, 83, 82, 78, 85, 79, 81, 81, 85, 84, 81)
M = as.matrix(cbind(x1, x2))
cov(M)
v.cv = cov(M) #Covariance Matrix
ev = v.cv$values
v.cv = cov(M) #Covariance Matrix
ev = v.cv$values
v.cv
type(v.cv)
typeof(v.cv)
v.cv = as.matrix(cov(M)) #Covariance Matrix
v.cv
ev = v.cv$values
typeof(v.cv)
v.cv = as.matrix(cov(M)) #Covariance Matrix
typeof(v.cv)
ev = v.cv$values
ev = eigen(v.cv)
ev$$values
ev$values
ev$vectors
vectors = c(ev$vectors[1,1], ev$vectors[2,2])
vectors
ev$values
ev
v.cv%*%vectors
vectors%*%ev$values
vectors
v.cv%*%vectors = vectors%*%ev$values
v.cv%*%vectors  == vectors%*%ev$values
ev = eigen(v.cv)
ev
ev%*%vectors
ev$values
ev%*%vectors
vectors
ev$values
ev$values%*%vectors
v.cv%*%vectors
?corrplot
?corplot()
?corrplot()
library(corrplot)
?corrplot()
## Similarly, to filter on between-predictor correlations, the cor function can
## calculate the correlations between predictor variables:
correlations <- cor(segDataCont)
dim(correlations)
correlations[1:4, 1:4]
## To visually examine the correlation structure of the data, the corrplot package
## contains an excellent function of the same name.
library(corrplot)
corrplot(correlations, order = "hclust")
## To filter based on correlations, the findCorrelation function will apply the
## algorithm in Sect. 3.5. For a given threshold of pairwise correlations, the function
## returns column numbers denoting the predictors that are recommended
## for deletion:
highCorr <- findCorrelation(correlations, cutoff = .85)
length(highCorr)
highCorr
filteredSegData <- segDataCont[, -highCorr]
length(filteredSegData)
corrplot(correlations, order = "hclust")
filteredSegData <- segDataCont[, -highCorr]
length(filteredSegData)
corrplot(filteredSegData)
filteredSegData <- segDataCont[, -highCorr]
length(filteredSegData)
corrplot(filteredSegData)
filteredSegData
correlations
segDataCont
corrplot(cor(filteredSegData))
corrplot(cor(filteredSegData))
setwd("D:\\GradSchool\\Statistics\\MA5790\\CLProject\\Data")
vehicle = read.csv('vehicles.csv')
names(vehicle)
head(vehicle$fuel,5)
distinct(df2$odometer)
head(vehicle$fuel,5)
distinct(vehicle$fuel,5)
unique(vehicle$fuel,5)
length(unique(vehicle$fuel))
(unique(vehicle$fuel))
length(unique(vehicle$model))
(unique(vehicle$model))
vehicle[578,]
hist(df2$odometer, xlab = "Miles", main="Distribution of Odometer Readings")
set.seed(1)
df2=vehicle[sample(nrow(vehicle),500),c("odometer","price", "year")]
hist(df2$odometer, xlab = "Miles", main="Distribution of Odometer Readings")
hist(df2$price, xlab = "Price (Dollars)", main = "Distribution of Listing Price")
hist(df2$odometer, xlab = "Miles", main="Distribution of Odometer Readings")
Im <- preProcess(df2,method=c("BoxCox","center","scale","knnImpute","pca","spatialSign")) ## need {caret} package
str(df2)
str(vehicle)
names(vehicle)
unique(vehicle$id)
names(vehicle)
unique(vehicle$title_status)
names(vehicle)
vehicle$description[1]
names(vehicle)
useableData = vehicle[,-c(1,2,4,15,20:25)]
set.seed(1)
vehCont = vehicle[sample(nrow(useableData),10000),c("odometer","price", "year")]
boxplot(vehCont$odometer)
boxplot(vehCont$year)
boxplot(vehCont$price)
set.seed(1)
vehCont = vehicle[sample(nrow(useableData),5000),c("odometer","price", "year")]
boxplot(vehCont$odometer)
boxplot(vehCont$year)
boxplot(vehCont$price)
boxplot(vehCont$year, main = "Year Built", ylab = "Year")
boxplot(vehCont$price, main = "Price", ylab = "Price")
boxplot(vehCont$price, main = "Price", ylab = "Price (Dollars)")
plot(price~year, data = vehCont)
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer"
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
plot(price~odometer, data = vehCont, main = "Price by Miles of Vehicle")
plot(price~odometer, data = vehCont, main = "Price by Miles of Vehicle", xlab = "Miles")
#Sample 5000 observations for EDA
set.seed(1)
eda.rows = sample(nrow(useableData),5000)
vehCont = vehicle[eda.rows,c("odometer","price", "year")]
#Explore continuous variables
boxplot(vehCont$odometer, main = "Odometer Reading", ylab = "Miles")
boxplot(vehCont$year, main = "Year Built", ylab = "Year")
boxplot(vehCont$price, main = "Price", ylab = "Price (Dollars)")
#Explore Relationship between response and continuous predictors
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
plot(price~odometer, data = vehCont, main = "Price by Miles of Vehicle", xlab = "Miles")
vehCat = vehicle[eda.rows, -c("odometer", "year")]
names(vehicle)
vehCat = vehicle[eda.rows, -c(6, 12)]
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status)
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "rice (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
##Explore Categorical Variables
unique(vehCat$title_status)
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
boxplot(vehCont$year, main = "Year Built", ylab = "Year")
#Explore Relationship between response and continuous predictors
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
##Explore continuous variables
boxplot(vehCont$odometer, main = "Odometer Reading", ylab = "Miles")
boxplot(vehCont$year, main = "Year Built", ylab = "Year")
boxplot(vehCont$price, main = "Price", ylab = "Price (Dollars)")
#Explore Relationship between response and continuous predictors
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
plot(price~odometer, data = vehCont, main = "Price by Miles of Vehicle", xlab = "Miles")
#Explore Relationship between response and continuous predictors
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
boxplot(vehCat$price~vehCat$title_status, ylab = "Price (Dollars)", xlab = "Title Status", main = "Boxplots of Price by Title")
names(vehicle)
unique(vehicle$type)
names(vehicle)
names(vehicle$model)
unique(vehicle$model)
length(unique(vehicle$model))
#Models and Types
unique(vehicle$model)
length(unique(vehicle$model))
unique(vehicle$type)
#Too many models, Types will probably suffice
names(vehCat)
vehCat = vehCat[,7]
#Too many models, Types will probably suffice
names(vehCat)
skewness(df2$odometer)
skewness(df2$price)
unique(vehicle$type)
sample(30,10)
#################
#################
##Experimenting##
x = numeric(90)
x
for (i in 1:90){
x[i] = i
}
x
fold1 = sample(x,30)
x-fold1
x[-fold1]
fold1
fold2 = sample(x[-fold1],30)
fold2
fold3 = x[-c(fold1, fold2)]
fold3
names(vehicle)
vehicle[title_status = ""]
vehicle["title_status" == ""]
vehicle[,"title_status" == ""]
vehicle[title_status]
vehicle["title_status"]
vehicle["title_status"] == ''
ts_boole = vehicle["title_status"] == ''
vehicle(ts_boole)
vehicle[ts_boole]
head(vehicle[ts_boole], 2)
head(vehicle[,ts_boole], 2)
head(vehicle[ts_boole,], 2)
unique(vehicle$condition)
boxplot(price~condition, data = vehicle)
plot(price~year, data = vehicle[vehicle["condition"] == "excellent"])
vehicle["condition"] == "excellent"]
vehicle["condition"] == "excellent"
plot(price~year, data = vehicle[vehicle["condition"] == "excellent",])
#plot
plot(price~year, data = vehicle[vehicle["condition"] == "excellent",], ylim = (0,125000))
#plot
plot(price~year, data = vehicle[vehicle["condition"] == "excellent",], ylim = c(0,125000))
unique(vehicle$condition)
##Explore Categorical Variables
unique(vehCat$title_status)
vehCat = vehicle[eda.rows, -c(6, 12)]
##Explore Categorical Variables
unique(vehCat$title_status)
TRUE and TRUE
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
both_blank = ts_boole & condition_boole
condition_boole = vehicle["condition"] == ""
both_blank = ts_boole & condition_boole
length(vehicle[both_blank])
length(vehicle[both_blank,])
#manual review
vehicle[both_blank,]
#manual review
head(vehicle[both_blank,])
#manual review
names(vehicle)
#manual review
names(useableData)
head(useableData[both_blank,])
boxplot(odometer~condition, data = useableData)
##Explore Categorical Variables
unique(vehCat$title_status)
library(RANN)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
library(dplyr)
library(statmod)
library(corrplot)
library(ggridges)
library(ggplot2)
corrplot(cor(odometer,year, data = vehCont))
corrplot(cor(vehCont$odometer, vehCont$year))
corrplot(cor(vehCont$odometer~vehCont$year))
cor(vehCont$odometer,vehCont$year)
vehCont$odometer
legitOdom = vehCont["odometer"] != ''
legitYear = vehCont["year"] != ''
cor(vehCont$odometer[legitOdom],vehCont$year[legitYear])
vehCont$odometer[legitOdom]
vehCont$year[legitYear]
legitOdom = vehCont["odometer"] != '' | vehCont["odometer"] != "NA"
legitYear = vehCont["year"] != ''| vehCont["year"] != "NA"
vehCont$odometer[legitOdom]
legitOdom
head(legitOdom,10)
legitOdom[1]
legitOdom = vehCont["odometer"] != '' & vehCont["odometer"] != "NA"
legitOdom[1]
legitOdom = vehCont[,"odometer"] != '' & vehCont[,"odometer"] != "NA"
legitOdom[1]
legitOdom[,1:4]
legitOdom[1:4]
head(vehCont[,"odometer"])
vehCont[1:6,"odometer"]
vehCont[1:6,"odometer"] != "NA"
vehCont[1:6,"odometer"] == "NA"
test = vehCont[1:6,"odometer"] == "NA"
test
!test
test = vehCont[1:6,"odometer"] != "NA";test
legitYear = vehCont["year"] != ''& vehCont["year"] != "NA"
vehCont$odometer[legitOdom]
vehCont$odometer[1:6legitOdom]
vehCont$odometer[1:6,legitOdom]
test = vehCont[1:6,"odometer"] != "NA";test
test2 = test == TRUE
test2 = test == TRUE;test2
test = vehCont[1:6,"odometer"] == "NA";test
vehCont[1:6,"odometer"]
vehCont[1:6,"odometer"][1]
type(vehCont[1:6,"odometer"][1])
typeof(vehCont[1:6,"odometer"][1])
test = vehCont[1:6,"odometer"] >= 0;test
names(vehCat)
vehCont = useableData[eda.rows,c("odometer","price", "year")]
vehCat = useableData[eda.rows, -c(6, 12)]
names(vehCat)
unique(vehCat$paint_color)
####Before Preprocessing
nrow(df2)
unique(vehCat$title_status)
unique(vehicle$condition)
#Sample 5000 observations for EDA
set.seed(1)
eda.rows = sample(nrow(useableData),500)
vehCont = useableData[eda.rows,c("odometer","price", "year")]
vehCat = useableData[eda.rows, -c(6, 12)]
names(vehCat)
#Explore Relationship between response and continuous predictors
plot(price~year, data = vehCont, main = "Price by Year of Manufacturer")
names(vehCat)
#Drop non-predictive variables
useableData = vehicle[,-c(1,2,4,15,20:25)]
names(useableData)
#Sample 5000 observations for EDA
set.seed(1)
eda.rows = sample(nrow(useableData),500)
vehCont = useableData[eda.rows,c("odometer","price", "year")]
vehCat = useableData[eda.rows, -c(2,6, 12)]
nearZeroVar(vehCat)
names(useableData)
names(vehCat)
#Drop non-predictive variables
useableData = vehicle[,-c(1,2,4,15,20:25)];names(useableData)
#Drop non-predictive variables
useableData = vehicle[,-c(1,2,4,15,20:25)];names(useableData)
names(vehicle)
#Drop non-predictive variables
useableData = vehicle[,-c(1,2,4,15,20:25)];names(useableData)
#Drop non-predictive variables
useableData = vehicle[,-c(1:4,15,20:25)];names(useableData)
vehCat = useableData[eda.rows, -c(1,2,8)]
nearZeroVar(vehCat$condition)
nearZeroVar(vehCat)
?nearZeroVar()
segDataCat<-segData[, statusColNum] ## for all categorical predictors, need to recall the data
dim(segDataCat)
nearZeroVar(segDataCat)
length(which(segDataCat[,33]==0))
nearZeroVar(vehCat)
nearZeroVar(segDataCat)
nearZeroVar(segDataCat[,-c(33,37,38)])
nearZeroVar(segDataCat)
## Similarly, to filter on between-predictor correlations, the cor function can
## calculate the correlations between predictor variables:
correlations <- cor(segDataCont)
dim(correlations)
correlations[1:4, 1:4]
df2 = useableData
length(unique(vehicle$type)) #27,045 models
str(classes)
data(twoClassData)
str(classes)
head(twoClassData, 3)
data(twoClassData)
twoClassData
data(twoClassData)
set.seed(1)
cvSplits <- createFolds(trainClasses, k = 10, returnTrain = TRUE)
trainingRows <- createDataPartition(classes, p = .80, list= FALSE)
head(trainingRows)
nrow(trainingRows)
trainPredictors <- predictors[trainingRows, ]
trainClasses <- classes[trainingRows]
head(trainPredictors)
# Do the same for the test set using negative integers.
testPredictors <- predictors[-trainingRows, ]
testClasses <- classes[-trainingRows]
str(trainPredictors)
str(testPredictors)
set.seed(1)
repeatedSplits <- createDataPartition(trainClasses, p = .80, times = 3)
str(repeatedSplits)
# For illustration, generate the information needed for three
# resampled versions of the training set.
?createDataPartition()
